#!/usr/bin/perl -w
#
# Convert JPEG map raster to Lambert 1 (EPSG:27571)
# worldfile format.
#
# (c) 2018 iomonad - <github.com/iomonad/igc>
#
# Dependencies:
#   Perl 5, v.26, (v5.26.0) built for x86_64-linux-gnu-thread-multi
#
# Description:
#   Image to WorldFile generator, a six line
#   plain text sidecar file used by geographic
#   information systems (GIS) to georeference
#   raster map images.
#   In my use case, this script allows me to
#   do area assembly on Qgis.
#

use threads;
use File::Basename;

use constant {
	HYPOTHETIC_ORIG_X =>  0x8EAD0,
	HYPOTHETIC_ORIG_Y =>  0x117D70,
	PANE_OFFSET_X     =>  0x258,
	PANE_OFFSET_Y     => -0x190
};

sub usage {
	print "Usage: ".$0." <jpeg files>\n"
}

sub sjpg {
	return unless $_[0];
    my ($width, $height);
    ($height, $width) =
		unpack( "nn", $1 ) if
		($_[0] =~ /\xFF\xC0...(....)/);
	return ($width, $height);
}

sub rf { do {
	local(@ARGV, $/) = $_[0]; <>
  };
}

sub apply {
	my ($target, $width, $height, $x, $y) = @_;
	my ($xn, $yn) = ($x + 1, $y + 1);
	my ($gx, $gy)   = (HYPOTHETIC_ORIG_X + ($x  * PANE_OFFSET_X),
                       HYPOTHETIC_ORIG_Y + ($y  * PANE_OFFSET_Y));
	my ($gxb, $gyb) = (HYPOTHETIC_ORIG_X + ($xn * PANE_OFFSET_X),
                       HYPOTHETIC_ORIG_Y + ($yn * PANE_OFFSET_Y));
	my ($psx, $psy) = ((($gxb - $gx) / $width),
                       (($gyb - $gy) / $height));
	open(my $fh, '>', $target) or die "Could not open file '$target' $!";
	printf $fh "%.14f\n0\n0\n%.14f\n".$gx."\n".$gy."\n", $psx, $psy;
	close $fh;
	print "Successfuly wrote worldfile: ".$target.".\n"
}

sub process {
	my ($ref) = @_;
	my $base = basename($ref);
	my $target = $ref;
	my @lamb = ($base =~ m/^([^-]*)-([^-]*)-.*$/g);

	if (($target =~ s/jpg/jgw/g) == 1) {
		if (scalar(@lamb) eq 2) {
			print "Generating ".$target.
				" for IGN (x:".$lamb[0].
				";y:".$lamb[1].").\n";
		    my @dim = sjpg(rf($ref));
			if (scalar(@dim) eq 2) {
				if (index("!", $base) ne -1) {
					@dim = map {$_ + 0.5} @dim;
				}
				apply($target, @dim, @lamb) or
					die "Error while processing panel.";
			} else { die "Invalid image file ($base). " }
		} else { die "Invalid lambert format ($base)." }
	} else { die "Invalid image extension ($base)." }
}

sub main {
	my @jobs;
	my @files;

	if ($#ARGV < 0) {
		exit (usage);
	}
	foreach my $f (@ARGV) {
		push @jobs, threads->create(sub {
			&process ($f)
									});
	}
	$_->join for @jobs;
}

exit(main(@ARGV));
